{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["gui","dat","scene","THREE","camera","window","innerWidth","innerHeight","renderer","controls","OrbitControls","domElement","geometry","material","color","mesh","textureLoader","animate","frame","rotation","y","children","map","i","type","x","requestAnimationFrame","render","init","setSize","document","body","appendChild","setClearColor","add","hide","position","min","max","step","name","parameters","spin","gsap","to","duration","Math","PI","addColor","onChange","z","load","process","font","textGeometry","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","computeBoundingBox","center","matcapTextureText","textMaterial","matcap","text","donutGeometry","matcapTextureDonut","donutMaterial","donut","random","scale","set","radiansPerSecond","MathUtils","degToRad","tick","delta","sphereGeometry","matcapTextureSphere","sphereMaterial","sphere","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8c7cd84.chunk.js","sourcesContent":["import * as THREE from 'three'\r\nimport {MathUtils} from 'three'\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls'\r\nimport * as dat from 'dat.gui'\r\nimport gsap from 'gsap'\r\nimport './App.css'\r\n\r\n\r\nconst gui = new dat.GUI()\r\n\r\nconst scene = new THREE.Scene()\r\nconst camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\r\nconst renderer = new THREE.WebGLRenderer()\r\n\r\nconst controls = new OrbitControls( camera, renderer.domElement );\r\nconst axesHelper = new THREE.AxesHelper()\r\n\r\nconst geometry = new THREE.BoxGeometry(1,1,1)\r\nconst material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } )\r\nconst mesh = new THREE.Mesh( geometry, material )\r\n\r\nconst textureLoader = new THREE.TextureLoader()\r\n\r\nfunction animate(frame) {\r\n    scene.rotation.y += 0.001\r\n\r\n    scene.children.map((mesh, i)=>{\r\n        if( mesh.geometry.type === 'TorusGeometry'){\r\n          //  mesh.rotation.y += 0.03\r\n            mesh.rotation.x += 0.03\r\n        }\r\n    })\r\n    requestAnimationFrame( animate )\r\n    renderer.render( scene, camera )\r\n}\r\n\r\nfunction init(){\r\n    renderer.setSize( window.innerWidth, window.innerHeight )\r\n    document.body.appendChild( renderer.domElement )\r\n    renderer.setClearColor('#ffe100', 1)\r\n\r\n    scene.add( controls )\r\n    //scene.add( axesHelper )\r\n    // scene.add( mesh )\r\n    gui.hide()\r\n    gui.add(mesh, 'visible')\r\n    gui.add(material, 'wireframe')\r\n    gui\r\n        .add(mesh.position, 'y')\r\n        .min(- 3)\r\n        .max(3)\r\n        .step(0.01)\r\n        .name('elevation')\r\n\r\n    const parameters = {\r\n        color: 0xff0000,\r\n        spin: () => gsap.to(mesh.rotation, { duration: 1, y: mesh.rotation.y + Math.PI * 2 })\r\n\r\n    }\r\n    gui\r\n        .addColor(parameters, 'color')\r\n        .onChange(() =>  renderer.setClearColor(parameters.color, 1)) // renderer.color.set(parameters.color))\r\n\r\n    gui.add(parameters, 'spin')\r\n\r\n    camera.position.z = 5\r\n\r\n    /**\r\n     * Fonts\r\n     */\r\n    const fontLoader = new THREE.FontLoader()\r\n\r\n    fontLoader.load(\r\n        process.env.PUBLIC_URL +'/fonts/helvetiker_regular.typeface.json',\r\n        (font) =>\r\n        {\r\n            const textGeometry = new THREE.TextGeometry(\r\n                'Stefany Carballo',\r\n                {\r\n                    font,\r\n                    size: 0.5,\r\n                    height: 0.2,\r\n                    curveSegments: 12,\r\n                    bevelEnabled: true,\r\n                    bevelThickness: 0.03,\r\n                    bevelSize: 0.02,\r\n                    bevelOffset: 0,\r\n                    bevelSegments: 5\r\n\r\n                }\r\n            )\r\n\r\n            textGeometry.computeBoundingBox()\r\n            textGeometry.center()\r\n\r\n            const matcapTextureText = textureLoader.load(process.env.PUBLIC_URL +'/textures/matcaps/1.png')\r\n            const textMaterial = new THREE.MeshMatcapMaterial({ matcap: matcapTextureText })\r\n\r\n\r\n            const text = new THREE.Mesh(textGeometry, textMaterial)\r\n            scene.add(text)\r\n\r\n\r\n        }\r\n    )\r\n\r\n    //add donuts\r\n    const donutGeometry = new THREE.TorusGeometry(0.2, 0.2, 20, 45)\r\n    const matcapTextureDonut = textureLoader.load(process.env.PUBLIC_URL +'/textures/matcaps/7.png')\r\n    const donutMaterial = new THREE.MeshMatcapMaterial({ matcap: matcapTextureDonut })\r\n\r\n    for(let i = 0; i < 50; i++){\r\n\r\n        const donut = new THREE.Mesh(donutGeometry, donutMaterial)\r\n\r\n        donut.position.x = (Math.random() - 0.5) * 10\r\n        donut.position.y = (Math.random() - 0.5) * 10\r\n        donut.position.z = (Math.random() - 0.5) * 10\r\n\r\n        donut.rotation.x = Math.random() * Math.PI\r\n        donut.rotation.y = Math.random() * Math.PI\r\n\r\n        const scale = Math.random()\r\n        donut.scale.set(scale, scale, scale)\r\n        const radiansPerSecond = MathUtils.degToRad(30);\r\n        donut.tick = (delta) => {\r\n            // increase the cube's rotation each frame\r\n            donut.rotation.z += radiansPerSecond * delta;\r\n            donut.rotation.x += radiansPerSecond * delta;\r\n            donut.rotation.y += radiansPerSecond * delta;\r\n        };\r\n\r\n        scene.add(donut)\r\n    }\r\n\r\n\r\n    //add sferes\r\n    const sphereGeometry = new THREE.SphereGeometry(0.3, 32, 16)\r\n    const matcapTextureSphere  = textureLoader.load(process.env.PUBLIC_URL +'/textures/matcaps/8.png')\r\n    const sphereMaterial = new THREE.MeshMatcapMaterial({ matcap: matcapTextureSphere })\r\n\r\n    for(let i = 0; i < 50; i++){\r\n\r\n        const sphere  = new THREE.Mesh(sphereGeometry, sphereMaterial)\r\n\r\n        sphere.position.x = (Math.random() - 0.5) * 10\r\n        sphere.position.y = (Math.random() - 0.5) * 10\r\n        sphere.position.z = (Math.random() - 0.5) * 10\r\n\r\n        sphere.rotation.x = Math.random() * Math.PI\r\n        sphere.rotation.y = Math.random() * Math.PI\r\n\r\n        const scale = Math.random()\r\n        sphere.scale.set(scale, scale, scale)\r\n\r\n        scene.add(sphere)\r\n    }\r\nconsole.log('*****', scene)\r\n    animate()\r\n}\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    return(\r\n        <div>{init()}</div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}